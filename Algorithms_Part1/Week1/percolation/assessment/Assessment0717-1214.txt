See the Assessment Guide for information on how to interpret this report.

ASSESSMENT SUMMARY

Compilation:  PASSED
API:          PASSED

Findbugs:     FAILED (2 warnings)
PMD:          FAILED (8 warnings)
Checkstyle:   FAILED (0 errors, 64 warnings)

Correctness:  9/27 tests passed
Memory:       4/8 tests passed
Timing:       2/4 tests passed

Aggregate score: 45.00%
[Compilation: 5%, API: 5%, Findbugs: 0%, PMD: 0%, Checkstyle: 0%, Correctness: 60%, Memory: 10%, Timing: 20%]

ASSESSMENT DETAILS

The following files were submitted:
----------------------------------
2.7K Jul 17 07:14 Percolation.java
2.9K Jul 17 07:14 PercolationStats.java


********************************************************************************
*  COMPILING                                                                    
********************************************************************************


% javac Percolation.java
*-----------------------------------------------------------

% javac PercolationStats.java
*-----------------------------------------------------------


================================================================


Checking the APIs of your programs.
*-----------------------------------------------------------
Percolation:

PercolationStats:

================================================================


********************************************************************************
*  CHECKING STYLE AND COMMON BUG PATTERNS                                       
********************************************************************************


% findbugs *.class
*-----------------------------------------------------------
H P DM_BOXED_PRIMITIVE_FOR_PARSING Bx: Replace code like 'new Integer(args[0]).intValue()' with 'Integer.parseInt(args[0])'.  At PercolationStats.java:[line 80]
H D DLS_DEAD_LOCAL_STORE DLS: Assigns a value to the local variable 'p' but that value is never used.  At Percolation.java:[line 85]
Warnings generated: 2

================================================================


% pmd *.java
*-----------------------------------------------------------
Percolation.java:5: The private instance (or static) variable 'n' can be made 'final'; it is initialized only in the declaration or constructor. [ImmutableField]
Percolation.java:8: The private instance (or static) variable 'wquf' can be made 'final'; it is initialized only in the declaration or constructor. [ImmutableField]
Percolation.java:9: The private instance (or static) variable 'upper' can be made 'final'; it is initialized only in the declaration or constructor. [ImmutableField]
Percolation.java:10: The private instance (or static) variable 'bottom' can be made 'final'; it is initialized only in the declaration or constructor. [ImmutableField]
Percolation.java:51: Avoid empty catch blocks [EmptyCatchBlock]
Percolation.java:85: Avoid unused local variables, such as 'p'. [UnusedLocalVariable]
PercolationStats.java:8: The private instance (or static) variable 'n' can be made 'final'; it is initialized only in the declaration or constructor. [ImmutableField]
PercolationStats.java:9: The private instance (or static) variable 'trials' can be made 'final'; it is initialized only in the declaration or constructor. [ImmutableField]
PMD ends with 8 warnings.


================================================================


% checkstyle *.java
*-----------------------------------------------------------
[WARN] Percolation.java:12:30: '{' is not preceded with whitespace. [WhitespaceAround]
[WARN] Percolation.java:13:11: 'if' is not followed by whitespace. [WhitespaceAround]
[WARN] Percolation.java:24:39: '{' is not preceded with whitespace. [WhitespaceAround]
[WARN] Percolation.java:26:11: 'if' is not followed by whitespace. [WhitespaceAround]
[WARN] Percolation.java:26:30: '{' is not preceded with whitespace. [WhitespaceAround]
[WARN] Percolation.java:28:17: The local variable 'wquf_position' must start with a lowercase letter and use camelCase. [LocalVariableName]
[WARN] Percolation.java:30:15: 'if' is not followed by whitespace. [WhitespaceAround]
[WARN] Percolation.java:33:15: 'if' is not followed by whitespace. [WhitespaceAround]
[WARN] Percolation.java:44:53: '{' is not preceded with whitespace. [WhitespaceAround]
[WARN] Percolation.java:47:51: The parameter variable 'wquf_position' must start with a lowercase letter and use camelCase. [ParameterName]
[WARN] Percolation.java:47:65: '{' is not preceded with whitespace. [WhitespaceAround]
[WARN] Percolation.java:48:12: 'try' is not followed by whitespace. [WhitespaceAround]
[WARN] Percolation.java:48:12: '{' is not preceded with whitespace. [WhitespaceAround]
[WARN] Percolation.java:49:15: 'if' is not followed by whitespace. [WhitespaceAround]
[WARN] Percolation.java:51: Empty catch block. [EmptyCatchBlock]
[WARN] Percolation.java:51:10: 'catch' is not preceded with whitespace. [WhitespaceAround]
[WARN] Percolation.java:51:10: '}' is not followed by whitespace. [WhitespaceAround]
[WARN] Percolation.java:51:15: 'catch' is not followed by whitespace. [WhitespaceAround]
[WARN] Percolation.java:51:43: '{' is not preceded with whitespace. [WhitespaceAround]
[WARN] Percolation.java:51:44: '{' is not followed by whitespace. [WhitespaceAround]
[WARN] Percolation.java:51:44: '}' is not preceded with whitespace. [WhitespaceAround]
[WARN] Percolation.java:55:44: '{' is not preceded with whitespace. [WhitespaceAround]
[WARN] Percolation.java:61:44: '{' is not preceded with whitespace. [WhitespaceAround]
[WARN] Percolation.java:67:35: '{' is not preceded with whitespace. [WhitespaceAround]
[WARN] Percolation.java:72:32: '{' is not preceded with whitespace. [WhitespaceAround]
[WARN] Percolation.java:76:55: '{' is not preceded with whitespace. [WhitespaceAround]
[WARN] Percolation.java:77:11: 'if' is not followed by whitespace. [WhitespaceAround]
[WARN] Percolation.java:79:16: 'if' is not followed by whitespace. [WhitespaceAround]
[WARN] Percolation.java:84:43: '{' is not preceded with whitespace. [WhitespaceAround]
[WARN] PercolationStats.java:4:1: Unnecessary import statement for 'java.lang.Math' because it is from the package 'java.lang'. [RedundantImport]
[WARN] PercolationStats.java:4:8: Unused import statement for 'java.lang.Math'. [UnusedImports]
[WARN] PercolationStats.java:12:47: '{' is not preceded with whitespace. [WhitespaceAround]
[WARN] PercolationStats.java:13:11: 'if' is not followed by whitespace. [WhitespaceAround]
[WARN] PercolationStats.java:23:25: '{' is not preceded with whitespace. [WhitespaceAround]
[WARN] PercolationStats.java:28:27: '{' is not preceded with whitespace. [WhitespaceAround]
[WARN] PercolationStats.java:33:33: '{' is not preceded with whitespace. [WhitespaceAround]
[WARN] PercolationStats.java:38:33: '{' is not preceded with whitespace. [WhitespaceAround]
[WARN] PercolationStats.java:42:37: '{' is not preceded with whitespace. [WhitespaceAround]
[WARN] PercolationStats.java:43:12: 'for' is not followed by whitespace. [WhitespaceAround]
...
Checkstyle ends with 0 errors and 63 warnings.

% custom checkstyle checks for Percolation.java
*-----------------------------------------------------------

% custom checkstyle checks for PercolationStats.java
*-----------------------------------------------------------
[WARN] PercolationStats.java:1: The number (0) of calls to 'Integer.parseInt()' must equal the number (2) of integer command-line arguments. [CommandLineArgument]
Checkstyle ends with 0 errors and 1 warnings.


================================================================


********************************************************************************
*  TESTING CORRECTNESS
********************************************************************************

Testing correctness of Percolation
*-----------------------------------------------------------
Running 15 total tests.

Tests 1 through 8 create a Percolation object using your code, then repeatedly
open sites by calling open(). After each call to open(), it checks the return
values of isOpen(), percolates(), numberOfOpenSites(), and isFull() in that order.
Except as noted, a site is opened at most once.

Test 1: Open predetermined list of sites using file inputs
  * filename = input6.txt
    - percolates() returns wrong value after 18 sites opened
    - student   percolates() = false
    - reference percolates() = true

    - failed after call 18 to isOpen()

  * filename = input8.txt
    - percolates() returns wrong value after 34 sites opened
    - student   percolates() = false
    - reference percolates() = true

    - failed after call 34 to isOpen()

  * filename = input8-no.txt
  * filename = input10-no.txt
  * filename = greeting57.txt
  * filename = heart25.txt
==> FAILED

Test 2: Open random sites until just before system percolates
  * n = 3
  * n = 5
  * n = 10
  * n = 10
  * n = 20
  * n = 20
  * n = 50
  * n = 50
==> passed

Test 3: Open predetermined sites for n = 1 and n = 2
  * filename = input1.txt
    - percolates() returns wrong value after 1 site opened
    - student   percolates() = false
    - reference percolates() = true

    - failed after call 1 to isOpen()

  * filename = input1-no.txt
  * filename = input2.txt
    - percolates() returns wrong value after 3 sites opened
    - student   percolates() = false
    - reference percolates() = true

    - failed after call 3 to isOpen()

  * filename = input2-no.txt
==> FAILED

Test 4: Check for backwash with predetermined sites
  * filename = input20.txt
    - percolates() returns wrong value after 204 sites opened
    - student   percolates() = false
    - reference percolates() = true

    - failed after call 204 to isOpen()

  * filename = input10.txt
    - percolates() returns wrong value after 56 sites opened
    - student   percolates() = false
    - reference percolates() = true

    - failed after call 56 to isOpen()

  * filename = input50.txt
    - percolates() returns wrong value after 1412 sites opened
    - student   percolates() = false
    - reference percolates() = true

    - failed after call 1412 to isOpen()

  * filename = jerry47.txt
    - percolates() returns wrong value after 1076 sites opened
    - student   percolates() = false
    - reference percolates() = true

    - failed after call 1076 to isOpen()

==> FAILED

Test 5: Check for backwash with predetermined sites that have
        multiple percolating paths
  * filename = input3.txt
    - percolates() returns wrong value after 3 sites opened
    - student   percolates() = false
    - reference percolates() = true

    - failed after call 3 to isOpen()

  * filename = input4.txt
    - percolates() returns wrong value after 4 sites opened
    - student   percolates() = false
    - reference percolates() = true

    - failed after call 4 to isOpen()

  * filename = input7.txt
    - percolates() returns wrong value after 12 sites opened
    - student   percolates() = false
    - reference percolates() = true

    - failed after call 12 to isOpen()

==> FAILED

Test 6: Open predetermined sites with long percolating path
  * filename = snake13.txt
    - percolates() returns wrong value after 85 sites opened
    - student   percolates() = false
    - reference percolates() = true

    - failed after call 85 to isOpen()

  * filename = snake101.txt
    
        ::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::
        OperationCountLimitExceededException
        Number of calls to methods in WeightedQuickUnionUF exceeds limit: 100000000
        ::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::

    - failed after call 4899 to isOpen()

==> FAILED

Test 7: Open every site
  * filename = input5.txt
    - percolates() returns wrong value after 21 sites opened
    - student   percolates() = false
    - reference percolates() = true

    - failed after call 21 to isOpen()

==> FAILED

Test 8: Open random sites until just before system percolates,
        allowing open() to be called on a site more than once
  * n = 3
  * n = 5
  * n = 10
  * n = 10
  * n = 20
  * n = 20
  * n = 50
  * n = 50
==> passed

Test 9: Check that specified exception is thrown if (row, col) is out of bounds
  * n = 10, (row, col) = (0, 6)
  * n = 10, (row, col) = (12, 6)
  * n = 10, (row, col) = (11, 6)
  * n = 10, (row, col) = (6, 0)
  * n = 10, (row, col) = (6, 12)
  * n = 10, (row, col) = (6, 11)
  * n = 10, (row, col) = (-2147483648, -2147483648)
  * n = 10, (row, col) = (1000, 1000)
==> passed

Test 10: check that specified exception is thrown if n <= 0 in constructor
  * n = -10
  * n = -1
  * n = 0
  * n = -2147483648
==> passed

Test 11: Create multiple Percolation objects at the same time
         (to make sure you didn't store data in static variables)
==> passed

Test 12: Open predetermined list of sites using file inputs,
         but permute the order in which methods are called
  * filename = input8.txt;  order =     isFull(),     isOpen(), percolates()
    - percolates() returns wrong value after 34 sites opened
    - student   percolates() = false
    - reference percolates() = true

  * filename = input8.txt;  order =     isFull(), percolates(),     isOpen()
    - percolates() returns wrong value after 34 sites opened
    - student   percolates() = false
    - reference percolates() = true

  * filename = input8.txt;  order =     isOpen(),     isFull(), percolates()
    - percolates() returns wrong value after 34 sites opened
    - student   percolates() = false
    - reference percolates() = true

  * filename = input8.txt;  order =     isOpen(), percolates(),     isFull()
    - percolates() returns wrong value after 34 sites opened
    - student   percolates() = false
    - reference percolates() = true

  * filename = input8.txt;  order = percolates(),     isOpen(),     isFull()
    - percolates() returns wrong value after 34 sites opened
    - student   percolates() = false
    - reference percolates() = true

  * filename = input8.txt;  order = percolates(),     isFull(),     isOpen()
    - percolates() returns wrong value after 34 sites opened
    - student   percolates() = false
    - reference percolates() = true

==> FAILED

Test 13: Call all methods in random order until just before system percolates
  * n = 3
  * n = 5
  * n = 7
  * n = 10
  * n = 20
  * n = 50
==> passed

Test 14: Call all methods in random order until almost all sites are open,
         but with inputs not prone to backwash
  * n = 3
    - percolates() returns wrong value after 6 sites opened
    - student   percolates() = false
    - reference percolates() = true

    - failed on trial 2 of 40

  * n = 5
    - percolates() returns wrong value after 13 sites opened
    - student   percolates() = false
    - reference percolates() = true

    - failed on trial 1 of 20

  * n = 7
    - percolates() returns wrong value after 32 sites opened
    - student   percolates() = false
    - reference percolates() = true

    - failed on trial 2 of 10

  * n = 10
    - percolates() returns wrong value after 79 sites opened
    - student   percolates() = false
    - reference percolates() = true

    - failed on trial 1 of 5

  * n = 20
    - percolates() returns wrong value after 314 sites opened
    - student   percolates() = false
    - reference percolates() = true

    - failed on trial 1 of 2

  * n = 50
    - percolates() returns wrong value after 1508 sites opened
    - student   percolates() = false
    - reference percolates() = true

    - failed on trial 1 of 1

==> FAILED

Test 15: Call all methods in random order until all sites are open,
         allowing open() to be called on a site more than once
         (these inputs are prone to backwash)
  * n = 3
    - percolates() returns wrong value after 6 sites opened
    - student   percolates() = false
    - reference percolates() = true

    - failed on trial 1 of 40

  * n = 5
    - percolates() returns wrong value after 10 sites opened
    - student   percolates() = false
    - reference percolates() = true

    - failed on trial 1 of 20

  * n = 7
    - percolates() returns wrong value after 25 sites opened
    - student   percolates() = false
    - reference percolates() = true

    - failed on trial 1 of 10

  * n = 10
    - percolates() returns wrong value after 53 sites opened
    - student   percolates() = false
    - reference percolates() = true

    - failed on trial 1 of 5

  * n = 20
    - percolates() returns wrong value after 198 sites opened
    - student   percolates() = false
    - reference percolates() = true

    - failed on trial 1 of 2

  * n = 50
    - percolates() returns wrong value after 1459 sites opened
    - student   percolates() = false
    - reference percolates() = true

    - failed on trial 1 of 1

==> FAILED


Total: 6/15 tests passed!


================================================================
********************************************************************************
*  TESTING CORRECTNESS (substituting reference Percolation)
********************************************************************************

Testing correctness of PercolationStats
*-----------------------------------------------------------
Running 12 total tests.

Test 1: Check that PercolationStats creates trials Percolation objects, each of size n-by-n
  * n =  20, trials =  10
    - PercolationStats created 0 Percolation objects instead of 10
  * n =  50, trials =  20
    - PercolationStats created 0 Percolation objects instead of 20
  * n = 100, trials =  50
    - PercolationStats created 0 Percolation objects instead of 50
  * n =  64, trials = 150
    - PercolationStats created 0 Percolation objects instead of 150
==> FAILED

Test 2: Check that PercolationStats calls open() until system percolates
  * n =  20, trials =  10
    - PercolationStats created 0 Percolation objects instead of 10
  * n =  50, trials =  20
    - PercolationStats created 0 Percolation objects instead of 20
  * n = 100, trials =  50
    - PercolationStats created 0 Percolation objects instead of 50
  * n =  64, trials = 150
    - PercolationStats created 0 Percolation objects instead of 150
==> FAILED

Test 3: Check that PercolationStats does not call open() after system percolates
  * n =  20, trials =  10
    - PercolationStats created 0 Percolation objects instead of 10
  * n =  50, trials =  20
    - PercolationStats created 0 Percolation objects instead of 20
  * n = 100, trials =  50
    - PercolationStats created 0 Percolation objects instead of 50
  * n =  64, trials = 150
    - PercolationStats created 0 Percolation objects instead of 150
==> FAILED

Test 4: Check that mean() is consistent with the number of intercepted calls to open()
        on blocked sites
  * n =  20, trials =  10
    - PercolationStats created 0 Percolation objects instead of 10
  * n =  50, trials =  20
    - PercolationStats created 0 Percolation objects instead of 20
  * n = 100, trials =  50
    - PercolationStats created 0 Percolation objects instead of 50
  * n =  64, trials = 150
    - PercolationStats created 0 Percolation objects instead of 150
==> FAILED

Test 5: Check that stddev() is consistent with the number of intercepted calls to open()
        on blocked sites
  * n =  20, trials =  10
    - PercolationStats created 0 Percolation objects instead of 10
  * n =  50, trials =  20
    - PercolationStats created 0 Percolation objects instead of 20
  * n = 100, trials =  50
    - PercolationStats created 0 Percolation objects instead of 50
  * n =  64, trials = 150
    - PercolationStats created 0 Percolation objects instead of 150
==> FAILED

Test 6: Check that confidenceLo() and confidenceHigh() are consistent with mean() and stddev()
  * n =  20, trials =  10
    - PercolationStats created 0 Percolation objects instead of 10
  * n =  50, trials =  20
    - PercolationStats created 0 Percolation objects instead of 20
  * n = 100, trials =  50
    - PercolationStats created 0 Percolation objects instead of 50
  * n =  64, trials = 150
    - PercolationStats created 0 Percolation objects instead of 150
==> FAILED

Test 7: Check whether exception is thrown if either n or trials is out of bounds
  * n = -23, trials =  42
  * n =  23, trials =   0
  * n = -42, trials =   0
  * n =  42, trials =  -1
  * n = -2147483648, trials = -2147483648
==> passed

Test 8: Create two PercolationStats objects at the same time and check mean()
        (to make sure you didn't store data in static variables)
  * n1 =  50, trials1 =  10, n2 =  50, trials2 =   5
    - PercolationStats created 0 Percolation objects instead of 10
  * n1 =  50, trials1 =   5, n2 =  50, trials2 =  10
    - PercolationStats created 0 Percolation objects instead of 5
  * n1 =  50, trials1 =  10, n2 =  25, trials2 =  10
    - PercolationStats created 0 Percolation objects instead of 10
  * n1 =  25, trials1 =  10, n2 =  50, trials2 =  10
    - PercolationStats created 0 Percolation objects instead of 10
  * n1 =  50, trials1 =  10, n2 =  15, trials2 = 100
    - PercolationStats created 0 Percolation objects instead of 10
  * n1 =  15, trials1 = 100, n2 =  50, trials2 =  10
    - PercolationStats created 0 Percolation objects instead of 100
==> FAILED

Test 9: Check that the methods return the same value, regardless of
        the order in which they are called
  * n =  20, trials =  10
  * n =  50, trials =  20
  * n = 100, trials =  50
  * n =  64, trials = 150
==> passed

Test 10: Check that no calls to StdRandom.setSeed()
  * n = 20, trials = 10
  * n = 20, trials = 10
  * n = 40, trials = 10
  * n = 80, trials = 10
==> passed

Test 11: Check distribution of number of sites opened until percolation
  * n = 2, trials = 100000

            value  observed  expected   2*O*ln(O/E)
        -------------------------------------------
                2         0   33333.0          0.00
                3         0   66667.0          0.00
        -------------------------------------------
                          0  100000.0          0.00
    
    G-statistic = 0.00 (p-value = 0.000000, reject if p-value <= 0.0001)
    Note: a correct solution will fail this test by bad luck 1 time in 10,000.


  * n = 3, trials = 100000

            value  observed  expected   2*O*ln(O/E)
        -------------------------------------------
                3         0    3571.0          0.00
                4         0   13889.0          0.00
                5         0   29365.0          0.00
                6         0   32937.0          0.00
                7         0   20238.0          0.00
        -------------------------------------------
                          0  100000.0          0.00
    
    G-statistic = 0.00 (p-value = 0.000000, reject if p-value <= 0.0001)
    Note: a correct solution will fail this test by bad luck 1 time in 10,000.


  * n = 4, trials = 100000

            value  observed  expected   2*O*ln(O/E)
        -------------------------------------------
                4         0     220.0          0.00
                5         0    1154.0          0.00
                6         0    3497.0          0.00
                7         0    7822.0          0.00
                8         0   13850.0          0.00
                9         0   19542.0          0.00
               10         0   21522.0          0.00
               11         0   17924.0          0.00
               12         0   10733.0          0.00
               13         0    3736.0          0.00
        -------------------------------------------
                          0  100000.0          0.00
    
    G-statistic = 0.00 (p-value = 0.000000, reject if p-value <= 0.0001)
    Note: a correct solution will fail this test by bad luck 1 time in 10,000.


==> FAILED

Test 12: Check that each site is opened the expected number of times
  * n = 2, trials = 100000
    - no Percolation object created

  * n = 3, trials = 100000
    - no Percolation object created

  * n = 4, trials = 100000
    - no Percolation object created

==> FAILED


Total: 3/12 tests passed!


================================================================
********************************************************************************
*  MEMORY (substituting reference Percolation)
********************************************************************************

Computing memory of PercolationStats
*-----------------------------------------------------------
Running 4 total tests.

Test 1a-1d: Memory usage as a function of trials for n = 100
            (max allowed: 8*trials + 128 bytes)

            trials        bytes
--------------------------------------------
=> passed       16          184         
=> passed       32          312         
=> passed       64          568         
=> passed      128         1080         
==> 4/4 tests passed


Estimated student memory = 8.00 T + 56.00   (R^2 = 1.000)

Total: 4/4 tests passed!

================================================================



********************************************************************************
*  TIMING (substituting reference Percolation)                                                                  
********************************************************************************

Timing PercolationStats
*-----------------------------------------------------------
Running 4 total tests.

Test 1: Count number of calls to StdStats.mean() and StdStats.stddev()
  * n =  20, trials =  10
    - calls StdStats.mean() the wrong number of times
    - number of student   calls to StdStats.mean() = 3
    - number of reference calls to StdStats.mean() = 1

    - calls StdStats.stddev() the wrong number of times
    - number of student   calls to StdStats.stddev() = 3
    - number of reference calls to StdStats.stddev() = 1

  * n =  50, trials =  20
    - calls StdStats.mean() the wrong number of times
    - number of student   calls to StdStats.mean() = 3
    - number of reference calls to StdStats.mean() = 1

    - calls StdStats.stddev() the wrong number of times
    - number of student   calls to StdStats.stddev() = 3
    - number of reference calls to StdStats.stddev() = 1

  * n = 100, trials =  50
    - calls StdStats.mean() the wrong number of times
    - number of student   calls to StdStats.mean() = 3
    - number of reference calls to StdStats.mean() = 1

    - calls StdStats.stddev() the wrong number of times
    - number of student   calls to StdStats.stddev() = 3
    - number of reference calls to StdStats.stddev() = 1

  * n =  64, trials = 150
    - calls StdStats.mean() the wrong number of times
    - number of student   calls to StdStats.mean() = 3
    - number of reference calls to StdStats.mean() = 1

    - calls StdStats.stddev() the wrong number of times
    - number of student   calls to StdStats.stddev() = 3
    - number of reference calls to StdStats.stddev() = 1

==> FAILED

Test 2: Count number of calls to StdRandom.setSeed()
  * n = 20, trials = 10
  * n = 20, trials = 10
  * n = 40, trials = 10
  * n = 80, trials = 10
==> passed

Test 3: Count number of calls to methods in Percolation
  * n =  20, trials =  10
    - number of student   calls to constructor = 0
    - number of reference calls to constructor = 0
    - you should create exactly one Percolation object per trial

    - number of student   calls to open() = 0
    - number of reference calls to open() = 0
    - you must call open() in each trial until the system percolates

    - number of student   calls to percolates() = 0
    - number of reference calls to percolates() = 0
    - you must call percolates() in each trial to determine when the system percolates

  * n =  50, trials =  20
    - number of student   calls to constructor = 0
    - number of reference calls to constructor = 0
    - you should create exactly one Percolation object per trial

    - number of student   calls to open() = 0
    - number of reference calls to open() = 0
    - you must call open() in each trial until the system percolates

    - number of student   calls to percolates() = 0
    - number of reference calls to percolates() = 0
    - you must call percolates() in each trial to determine when the system percolates

  * n = 100, trials =  50
    - number of student   calls to constructor = 0
    - number of reference calls to constructor = 0
    - you should create exactly one Percolation object per trial

    - number of student   calls to open() = 0
    - number of reference calls to open() = 0
    - you must call open() in each trial until the system percolates

    - number of student   calls to percolates() = 0
    - number of reference calls to percolates() = 0
    - you must call percolates() in each trial to determine when the system percolates

  * n =  64, trials = 150
    - number of student   calls to constructor = 0
    - number of reference calls to constructor = 0
    - you should create exactly one Percolation object per trial

    - number of student   calls to open() = 0
    - number of reference calls to open() = 0
    - you must call open() in each trial until the system percolates

    - number of student   calls to percolates() = 0
    - number of reference calls to percolates() = 0
    - you must call percolates() in each trial to determine when the system percolates

==> FAILED

Test 4: Call PercolationStats methods with trials = 3 and values of n that go up
        by a factor of sqrt(2). The test passes when n reaches 2,896.

     The approximate order-of-growth is n ^ (log ratio)

         n  seconds log ratio
     ------------------------
==> passed


Total: 2/4 tests passed!


================================================================



********************************************************************************
*  MEMORY
********************************************************************************

Computing memory of Percolation
*-----------------------------------------------------------
Running 4 total tests.

Test 1a-1d: Check that total memory <= 17 n^2 + 128 n + 1024 bytes

                 n        bytes
--------------------------------------------
    
        ::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::
        OperationCountLimitExceededException
        Number of calls to methods in WeightedQuickUnionUF exceeds limit: 100000000
        ::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::


Total: 0/4 tests passed!

================================================================



********************************************************************************
*  TIMING                                                                  
********************************************************************************

Timing Percolation
*-----------------------------------------------------------
Test 1a-1e: Creates an n-by-n percolation system; open sites at random until
            the system percolates. Count calls to connected(), union() and
            find() in WeightedQuickUnionUF.

                                       2 * connected()
                 n       union()              + find()        constructor
-----------------------------------------------------------------------------------
    
        ::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::
        OperationCountLimitExceededException
        Number of calls to methods in WeightedQuickUnionUF exceeds limit: 100000000
        ::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::

==> 0/7 tests passed


If one of the values in the table violates the performance limits
the factor by which you failed the test appears in parentheses.
For example, (9.6x) in the union() column indicates that it uses
9.6x too many calls.


Tests 2a-2f: Checks whether the number of calls to union(), connected(), and find()
             is a constant per call to open(), isOpen(), isFull(), and percolates().
             The table shows the maximum number of union(), connected(), and
             find() calls made during a single call to open(), isOpen(), isFull(),
             and percolates().

                 n     per open()      per isOpen()    per isFull()    per percolates() 
---------------------------------------------------------------------------------------------


WARNING: the time limit of 180 seconds was exceeded, so not all tests could be completed.

================================================================
