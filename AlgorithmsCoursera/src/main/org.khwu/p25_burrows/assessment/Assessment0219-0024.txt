See the Assessment Guide for information on how to interpret this report.

ASSESSMENT SUMMARY

Compilation:  PASSED
API:          PASSED

Findbugs:     PASSED
PMD:          PASSED
Checkstyle:   FAILED (0 errors, 1 warning)

Correctness:  56/64 tests passed
Memory:       10/10 tests passed
Timing:       156/159 tests passed

Aggregate score: 92.12%
[Compilation: 5%, API: 5%, Findbugs: 0%, PMD: 0%, Checkstyle: 0%, Correctness: 60%, Memory: 10%, Timing: 20%]

ASSESSMENT DETAILS

The following files were submitted:
----------------------------------
2.3K Feb 19 08:25 BurrowsWheeler.java
1.3K Feb 19 08:25 CircularSuffixArray.java
1.8K Feb 19 08:25 MoveToFront.java


********************************************************************************
*  COMPILING                                                                    
********************************************************************************


% javac CircularSuffixArray.java
*-----------------------------------------------------------

% javac BurrowsWheeler.java
*-----------------------------------------------------------

% javac MoveToFront.java
*-----------------------------------------------------------


================================================================


Checking the APIs of your programs.
*-----------------------------------------------------------
CircularSuffixArray:

BurrowsWheeler:

MoveToFront:

================================================================


********************************************************************************
*  CHECKING STYLE AND COMMON BUG PATTERNS                                       
********************************************************************************


% findbugs *.class
*-----------------------------------------------------------


================================================================


% pmd .
*-----------------------------------------------------------


================================================================


% checkstyle *.java
*-----------------------------------------------------------

% custom checkstyle checks for CircularSuffixArray.java
*-----------------------------------------------------------

% custom checkstyle checks for BurrowsWheeler.java
*-----------------------------------------------------------
[WARN] BurrowsWheeler.java:49:20: You will probably not meet the performance requirement for 'inverseTransform()' if you call 'Arrays.sort()'. [Performance]
Checkstyle ends with 0 errors and 1 warning.

% custom checkstyle checks for MoveToFront.java
*-----------------------------------------------------------


================================================================


********************************************************************************
*  TESTING CORRECTNESS
********************************************************************************

Testing correctness of CircularSuffixArray
*-----------------------------------------------------------
Running 15 total tests.

Test 1: check index() and length() with random binary strings
  * length = 10
    - string = "BAAABBAABB"
    - mismatch in indices
    - student   index(1) = 6
    - reference index(1) = 2

    - failed on trial 1 of 1000

  * length = 100
    - string = "BBBBBBBABBABABAABAABABAAABAAABABAAABAAAAABABAABABBAABBAABAAB..."
    - mismatch in indices
    - student   index(0) = 99
    - reference index(0) = 67

    - failed on trial 1 of 1000

  * length = 1000
    - string = "AAABAABABAABAAABAAABABABABBAABBAABBBABBABBAABBBABAAABBAAABBB..."
    - mismatch in indices
    - student   index(0) = 999
    - reference index(0) = 590

    - failed on trial 1 of 1000

==> FAILED

Test 2: check index() and length() with random uppercase strings
  * length = 10
    - string = "UJPMUJMSTJ"
    - mismatch in indices
    - student   index(0) = 9
    - reference index(0) = 5

    - failed on trial 1 of 1000

  * length = 100
    - string = "VCFWWBPAGPPBNLJMILHFLJPDXQFTTVVGKKZKLJIWHURJSLMXQDPZRBHKZWKJ..."
    - mismatch in indices
    - student   index(3) = 99
    - reference index(3) = 53

    - failed on trial 2 of 1000

  * length = 1000
    - string = "DHPFQUEUVFMDWHGIAYGDDVIJRWNCSLUOMMQEWLIZDVOESBFMYAJOLOZJJNJL..."
    - mismatch in indices
    - student   index(974) = 999
    - reference index(974) = 388

    - failed on trial 1 of 1000

==> FAILED

Test 3: check index() and length() with random ASCII strings
  * length = 10
    - string = hex representation: 48 2f 6e 23 09 44 6a 19 7a 6e 
    - mismatch in indices
    - student   index(7) = 9
    - reference index(7) = 2

    - failed on trial 20 of 1000

  * length = 100
    - string = hex representation: 71 63 20 7d 66 60 2e 49 72 10 32 0b 56 6f 14 6e 47 39 36 48 ...
    - mismatch in indices
    - student   index(38) = 99
    - reference index(38) = 18

    - failed on trial 1 of 1000

  * length = 1000
    - string = hex representation: 6a 5f 6f 5a 1f 07 69 0f 2c 2b 39 18 68 54 1a 30 1a 7c 48 02 ...
    - mismatch in indices
    - student   index(0) = 277
    - reference index(0) = 306

    - failed on trial 1 of 1000

==> FAILED

Test 4: check index() and length() with random extended ASCII strings
  * length = 10
    - string = hex representation: a5 4f 03 c8 6e fe da 89 c9 a5 
    - mismatch in indices
    - student   index(4) = 9
    - reference index(4) = 0

    - failed on trial 43 of 1000

  * length = 100
    - string = hex representation: 49 be 6d 99 b6 1c 93 8e 37 1e 5f b6 a8 d9 4f 01 28 4e 8c 07 ...
    - mismatch in indices
    - student   index(36) = 99
    - reference index(36) = 47

    - failed on trial 3 of 1000

  * length = 1000
    - string = hex representation: 96 52 86 55 a2 17 ac a6 fc 82 79 bf f4 ed 96 83 5c 0b e8 69 ...
    - mismatch in indices
    - student   index(192) = 999
    - reference index(192) = 506

    - failed on trial 2 of 1000

==> FAILED

Test 5: check index() and length() with strings from text files
  * cadabra.txt
    - string = "CADABRA!ABRA"
    - mismatch in indices
    - student   index(1) = 11
    - reference index(1) = 6

  * amendments.txt
    - string = "Article I. Congress shall make no law respecting an establis..."
    - mismatch in indices
    - student   index(0) = 18368
    - reference index(0) = 14383

  * moby1.txt
    - string = "Call me Ishmael. Some years ago- never mind how long precise..."
    - mismatch in indices
    - student   index(0) = 12217
    - reference index(0) = 10396

  * dickens1000.txt
    - string = "It was the best of times, it was the worst of times, it was ..."
    - mismatch in indices
    - student   index(759) = 999
    - reference index(759) = 969

==> FAILED

Test 6: check index() and length() with strings from binary files
  * us.gif
    - string = hex representation: 47 49 46 38 39 61 8e 01 01 01 d5 00 00 94 18 29 06 02 03 84 ...
    - mismatch in indices
    - student   index(0) = 12398
    - reference index(0) = 206

  * CS_bricks.jpg
    - string = hex representation: ff d8 ff e1 00 16 45 78 69 66 00 00 4d 4d 00 2a 00 00 00 08 ...
    - mismatch in indices
    - student   index(0) = 4
    - reference index(0) = 403

  * rand1K.bin
    - string = hex representation: 91 a6 be ff 17 30 3b c2 90 4c dc 6f 14 73 64 27 04 6b 87 8a ...
    - mismatch in indices
    - student   index(683) = 999
    - reference index(683) = 574

==> FAILED

Test 7: check index() and length() with random strings of length 0, 1, and 2
  * length = 0
  * length = 1
  * length = 2
==> passed

Test 8: check that index() throws an exception when argument is out of bounds
  * string of length 10
  * string of length 100
  * string of length 2
  * string of length 1
  * string of length 0
==> passed

Test 9: check that constructor throws an exception when argument is null
==> passed

Test 10: check that two CircularSuffixArray objects can be created at the same time
  * cadabra.txt and amendments.txt
    - string = "CADABRA!ABRA"
    - mismatch in indices
    - student   index(1) = 11
    - reference index(1) = 6

    - string = "Article I. Congress shall make no law respecting an establis..."
    - mismatch in indices
    - student   index(0) = 18368
    - reference index(0) = 14383

  * amendments.txt and cadabra.txt
    - string = "Article I. Congress shall make no law respecting an establis..."
    - mismatch in indices
    - student   index(0) = 18368
    - reference index(0) = 14383

    - string = "CADABRA!ABRA"
    - mismatch in indices
    - student   index(1) = 11
    - reference index(1) = 6

  * dickens1000.txt and cadabra.txt
    - string = "It was the best of times, it was the worst of times, it was ..."
    - mismatch in indices
    - student   index(759) = 999
    - reference index(759) = 969

    - string = "CADABRA!ABRA"
    - mismatch in indices
    - student   index(1) = 11
    - reference index(1) = 6

==> FAILED

Test 11: check that CircularSuffixArray is immutable
  * string = "ZTTGCJOXYVTQVOLKVWZTLQWGABRKKO"
  * string = "BABAAAABABABBBBBABBABBABABAABA"
  * string = "AAAAAAAAAAAAAAAAAAAAAAAAAAAAAA"
  * string = hex representation: a1 8f f2 2c 2c fe c0 a8 54 37 4f f5 67 bd e3 
==> passed

Test 12: check index() and length() with corner-case strings
  * a.txt
  * nomatch.txt
  * zebra.txt
  * alphanum.txt
==> passed

Test 13: check index() and length() with strings that are nontrivial circular
         that are nontrivial circular suffixes of themselves
  * stars.txt
  * couscous.txt
==> passed

Test 14: check index() and length() with unary strings
  * length 10 string over unary alphabet
  * length 100 string over unary alphabet
  * length 1000 string over unary alphabet
==> passed

Test 15: check index() and length() with random strings
         that are nontrivial circular suffixes of themselves
  * length 2 string over binary alphabet, repeated 2 times
  * length 2 string over binary alphabet, repeated 10 times
  * length 5 string over binary alphabet, repeated 2 times
    - string = "ABBABABBAB"
    - mismatch in indices
    - student   index(4) = 9
    - reference index(4) = 2

    - failed on trial 1 of 5

  * length 5 string over binary alphabet, repeated 3 times
    - string = "BBABBBBABBBBABB"
    - mismatch in indices
    - student   index(3) = 14
    - reference index(3) = 1

    - failed on trial 1 of 5

  * length 5 string over binary alphabet, repeated 5 times
    - string = "ABAABABAABABAABABAABABAAB"
    - mismatch in indices
    - student   index(5) = 23
    - reference index(5) = 0

    - failed on trial 1 of 5

  * length 7 string over uppercase alphabet, repeated 2 times
  * length 7 string over uppercase alphabet, repeated 3 times
  * length 7 string over uppercase alphabet, repeated 5 times
==> FAILED

Total: 7/15 tests passed!


================================================================
Testing correctness of MoveToFront
*-----------------------------------------------------------
Running 23 total tests.

Test 1a: check main() on text files
  * java MoveToFront - < abra.txt
  * java MoveToFront - < zebra.txt
  * java MoveToFront - < amendments.txt
  * java MoveToFront - < aesop.txt
==> passed

Test 1b: check main() on text files
  * java MoveToFront + < abra.txt.mtf
  * java MoveToFront + < zebra.txt.mtf
  * java MoveToFront + < amendments.txt.mtf
  * java MoveToFront + < aesop.txt.mtf
==> passed

Test 2a: check that main() is consistent with encode() on text files
  * abra.txt
  * zebra.txt
  * amendments.txt
  * aesop.txt
==> passed

Test 2b: check that main() is consistent with decode() on text files
  * abra.txt.mtf
  * zebra.txt.mtf
  * amendments.txt.mtf
  * aesop.txt.mtf
==> passed

Test 3a: check encode() on text files
  * abra.txt
  * zebra.txt
  * amendments.txt
  * aesop.txt
  * stars.txt
  * alphanum.txt
  * a.txt
==> passed

Test 3b: check encode() on binary files
  * us.gif
  * CS_bricks.jpg
  * rand10K.bin
==> passed

Test 3c: check encode() on random inputs
  * 10 random characters from { A } alphabet
  * 10 random characters from { A, B } alphabet
  * 10 random characters from { A, T, C, G } alphabet
  * 10 random characters from uppercase letter alphabet
  * 1000 random characters from { A } alphabet
  * 1000 random characters from { A, B } alphabet
  * 1000 random characters from { A, T, C, G } alphabet
  * 1000 random characters from uppercase letter alphabet
==> passed

Test 3d: check encode() on more random inputs
  * 1000 random characters from ASCII alphabet 
  * 1000 random characters from extended ASCII alphabet
  * 1000 random characters from extended ASCII alphabet (excluding 0x00)
  * 1000 random characters from extended ASCII alphabet (excluding 0xFF)
==> passed

Test 4a: check decode() on move-to-front-encoded text files
  * abra.txt.mtf
  * zebra.txt.mtf
  * amendments.txt.mtf
  * aesop.txt.mtf
  * stars.txt.mtf
  * alphanum.txt.mtf
  * a.txt.mtf
==> passed

Test 4b: check decode() on move-to-front encoded binary files
  * us.gif.mtf
  * CS_bricks.jpg.mtf
  * rand10K.bin.mtf
==> passed

Test 4c: check decode() on random inputs
  * 10 random characters from { A } alphabet
  * 10 random characters from { A, B } alphabet
  * 10 random characters from { A, T, C, G } alphabet
  * 10 random characters from uppercase letter alphabet
  * 1000 random characters from { A } alphabet
  * 1000 random characters from { A, B } alphabet
  * 1000 random characters from { A, T, C, G } alphabet
  * 1000 random characters from uppercase letter alphabet
==> passed

Test 4d: check decode() on more random inputs
  * 1000 random characters from ASCII alphabet 
  * 1000 random characters from extended ASCII alphabet
  * 1000 random characters from extended ASCII alphabet (excluding 0x00)
  * 1000 random characters from extended ASCII alphabet (excluding 0xFF)
==> passed

Test 4e: check decode() on random inputs
         that were encoded with move-to-front
  * 10 random characters from { A } alphabet
  * 10 random characters from { A, B } alphabet
  * 10 random characters from { A, T, C, G } alphabet
  * 10 random characters from uppercase letter alphabet
  * 1000 random characters from { A } alphabet
  * 1000 random characters from { A, B } alphabet
  * 1000 random characters from { A, T, C, G } alphabet
  * 1000 random characters from uppercase letter alphabet
==> passed

Test 4f: check decode() on more random inputs
         that were encoded with move-to-front
  * 1000 random characters from ASCII alphabet 
  * 1000 random characters from extended ASCII alphabet
  * 1000 random characters from extended ASCII alphabet (excluding 0x00)
  * 1000 random characters from extended ASCII alphabet (excluding 0xFF)
==> passed

Test 5a: check whether decode(encode()) = original on text files
  * abra.txt
  * zebra.txt
  * amendments.txt
  * aesop.txt
  * stars.txt
  * alphanum.txt
  * a.txt
==> passed

Test 5b: check whether decode(encode()) = original on binary files
  * us.gif
  * CS_bricks.jpg
  * rand10K.bin
==> passed

Test 5c: check that decode(encode()) = original on random inputs
  * 10 random characters from { A } alphabet
  * 10 random characters from { A, B } alphabet
  * 10 random characters from { A, T, C, G } alphabet
  * 10 random characters from uppercase letter alphabet
  * 100 random characters from { A } alphabet
  * 1000 random characters from { A, B } alphabet
  * 1000 random characters from { A, T, C, G } alphabet
  * 1000 random characters from uppercase letter alphabet
==> passed

Test 5d: check that decode(encode()) = original on random inputs
  * 1000 random characters from ASCII alphabet 
  * 1000 random characters from extended ASCII alphabet
  * 1000 random characters from extended ASCII alphabet (excluding 0x00)
  * 1000 random characters from extended ASCII alphabet (excluding 0xFF)
==> passed

Test 6a: check that encode() calls either close() or flush()
  * amendments.txt
  * aesop.txt
==> passed

Test 6b: check that decode() calls either close() or flush()
  * amendments.txt.mtf
  * aesop.txt.mtf
==> passed

Test 7a: check encode() on large files
  * rand100K.bin
  * world192.txt
==> passed

Test 7b: check decode() on large files
  * rand100K.bin.mtf
  * world192.txt.mtf
==> passed

Test 7c: check whether decode(encode()) = original on large files
  * rand100K.bin
  * world192.txt
==> passed


Total: 23/23 tests passed!


================================================================
********************************************************************************
*  TESTING CORRECTNESS (substituting reference CircularSuffixArray)
********************************************************************************

Testing correctness of BurrowsWheeler
*-----------------------------------------------------------
Running 26 total tests.

Test 1a: check main() on text files
  * java BurrowsWheeler - < abra.txt
  * java BurrowsWheeler - < zebra.txt
  * java BurrowsWheeler - < cadabra.txt
  * java BurrowsWheeler - < amendments.txt
==> passed

Test 1b: check main() on text files
  * java BurrowsWheeler + < abra.txt.bwt
  * java BurrowsWheeler + < zebra.txt.bwt
  * java BurrowsWheeler + < cadabra.txt.bwt
  * java BurrowsWheeler + < amendments.txt.bwt
==> passed

Test 2a: check that main() is consistent with transform() on text files
  * abra.txt
  * zebra.txt
  * cadabra.txt
  * amendments.txt
==> passed

Test 2b: check that main() is consistent with inverseTransform() on text files
  * abra.txt.bwt
  * zebra.txt.bwt
  * cadabra.txt.bwt
  * amendments.txt.bwt
==> passed

Test 3a: check transform() on text files
  * abra.txt
  * zebra.txt
  * cadabra.txt
  * amendments.txt
==> passed

Test 3b: check transform() on corner-case text files
  * alphanum.txt
  * a.txt
==> passed

Test 3c: check transform() on binary files
  * us.gif
  * CS_bricks.jpg
  * rand10K.bin
==> passed

Test 3d: check transform() on random inputs
  * 10 random characters from binary alphabet
  * 10 random characters from DNA alphabet
  * 10 random characters from uppercase alphabet
  * 1000 random characters from binary alphabet
  * 1000 random characters from DNA alphabet
  * 1000 random characters from uppercase alphabet
==> passed

Test 3e: check transform() on more random inputs
  * 1000 random characters from ASCII alphabet 
  * 1000 random characters from extended ASCII alphabet
  * 1000 random characters from extended ASCII alphabet (excluding 0x00)
  * 1000 random characters from extended ASCII alphabet (excluding 0xFF)
==> passed

Test 3f: check tranform() on random inputs that are circular
         shifts of themselves
  * 5 random strings from unary alphabet
  * 5 random strings from binary alphabet
  * 5 random strings from DNA alphabet
  * 5 random strings from uppercase alphabet
==> passed

Test 4a: check inverseTransform() on text files
  * abra.txt.bwt
  * zebra.txt.bwt
  * cadabra.txt.bwt
  * amendments.txt.bwt
==> passed

Test 4b: check inverseTransform() on corner-case text files
  * alphanum.txt.bwt
  * a.txt.bwt
  * stars.txt.bwt
  * couscous.txt.bwt
==> passed

Test 4c: check inverseTransform() on binary files
  * us.gif.bwt
  * CS_bricks.jpg.bwt
  * rand10K.bin.bwt
==> passed

Test 4d: check inverseTransform() of transform() on random inputs
  * 10 random characters from unary alphabet
  * 10 random characters from binary alphabet
  * 10 random characters from DNA alphabet
  * 10 random characters from uppercase alphabet
  * 100 random characters from unary alphabet
  * 1000 random characters from binary alphabet
  * 1000 random characters from DNA alphabet
  * 1000 random characters from uppercase alphabet
==> passed

Test 4e: check inverseTransform() of transform() on more random inputs
  * 1000 random characters from ASCII alphabet 
  * 1000 random characters from extended ASCII alphabet
  * 1000 random characters from extended ASCII alphabet (excluding 0x00)
  * 1000 random characters from extended ASCII alphabet (excluding 0xFF)
==> passed

Test 5a: check that inverseTransform(transform()) = original on text files
  * abra.txt
  * zebra.txt
  * cadabra.txt
  * amendments.txt
==> passed

Test 5b: check that inverseTransform(transform()) = original on corner-case text files
  * alphanum.txt
  * a.txt
  * stars.txt
  * couscous.txt
==> passed

Test 5c: check that inverseTransform(transform()) = original on binary files
  * us.gif
  * CS_bricks.jpg
  * rand10K.bin
==> passed

Test 5d: check that inverseTransform(tranform()) = original on random inputs
  * 10 random characters from binary alphabet
  * 10 random characters from DNA alphabet
  * 10 random characters from uppercase alphabet
  * 1000 random characters from binary alphabet
  * 1000 random characters from DNA alphabet
  * 1000 random characters from uppercase alphabet
==> passed

Test 5e: check that inverseTransform(tranform()) = original on random inputs
  * 1000 random characters from ASCII alphabet 
  * 1000 random characters from extended ASCII alphabet
  * 1000 random characters from extended ASCII alphabet (excluding 0x00)
  * 1000 random characters from extended ASCII alphabet (excluding 0xFF)
==> passed

Test 5f: check that inverseTransform(tranform()) = original
         on random inputs that are circular shifts of themselves
  * random strings from unary alphabet
  * random strings from binary alphabet
  * random strings from DNA alphabet
  * random strings from uppercase alphabet
==> passed

Test 6a: check that transform() calls either close() or flush()
  * amendments.txt
  * aesop.txt
==> passed

Test 6b: check that inverseTransform() calls either close() or flush()
  * amendments.txt.bwt
  * aesop.txt.bwt
==> passed

Test 7a: check transform() on large files
  * rand100K.bin
  * world192.txt
==> passed

Test 7b: check inverseTransform() on large files
  * rand100K.bin.bwt
  * world192.txt.bwt
==> passed

Test 7c: check that inverseTransform(transform()) = original on large files
  * rand100K.bin
  * world192.txt
==> passed


Total: 26/26 tests passed!


================================================================
********************************************************************************
*  MEMORY
********************************************************************************

Analyzing memory of CircularSuffixArray
*-----------------------------------------------------------
Running 10 total tests.

Memory usage of a CircularSuffixArray for a random string of length n.
Maximum allowed memory is 64n + 128.

                 n        bytes
-------------------------------
=> passed       16          216
=> passed       32          312
=> passed       64          504
=> passed      128          888
=> passed      256         1656
=> passed      512         3192
=> passed     1024         6264
=> passed     2048        12408
=> passed     4096        24696
=> passed     8192        49272
==> 10/10 tests passed

Total: 10/10 tests passed!

Estimated student memory (bytes) = 6.00 n + 120.00   (R^2 = 1.000)
================================================================



********************************************************************************
*  TIMING
********************************************************************************

Timing CircularSuffixArray
*-----------------------------------------------------------
Running 26 total tests.

Tests  1-13: time to create a circular suffix array for the first
             n character of dickens.txt and call index(i) for each i

            [ max allowed time = 10 seconds and <= 12x reference ]

                 n    student  reference      ratio
---------------------------------------------------
=> passed     1000       0.01       0.00      13.45
=> passed     2000       0.00       0.00       0.86
=> passed     4000       0.00       0.00       0.97
=> passed     8000       0.00       0.00       1.04
=> passed    16000       0.01       0.01       1.00
=> passed    32000       0.01       0.01       1.40
=> passed    64000       0.02       0.01       1.73
=> passed   128000       0.03       0.02       1.74
=> passed   256000       0.04       0.03       1.43
=> passed   512000       0.08       0.05       1.64
=> passed  1024000       0.18       0.11       1.66
=> passed  2048000       0.40       0.28       1.45
=> passed  4096000       0.92       0.66       1.40

Estimated running time (using last 6 measurements)
    = 1.39e-07 * n^1.02  (R^2 = 0.99)


Tests 14-26: time to create circular suffix array for n random ASCII characters
            and call index(i) for each i

            [ max allowed time = 10 seconds and <= 20x reference ]

                 n    student  reference      ratio
---------------------------------------------------
=> passed     1000       0.00       0.00       2.48
=> passed     2000       0.00       0.00       1.35
=> passed     4000       0.00       0.00       1.26
=> passed     8000       0.00       0.00       1.95
=> passed    16000       0.00       0.00       2.79
=> passed    32000       0.00       0.00       3.45
=> passed    64000       0.01       0.00       3.68
=> passed   128000       0.02       0.00       3.39
=> passed   256000       0.03       0.02       2.17
=> passed   512000       0.08       0.07       1.15
=> passed  1024000       0.17       0.11       1.61
=> passed  2048000       0.41       0.21       1.89
=> passed  4096000       0.90       0.33       2.73

Estimated running time (using last 6 measurements)
    = 1.81e-08 * n^1.16  (R^2 = 1.00)


Total: 26/26 tests passed!


================================================================



********************************************************************************
*  TIMING
********************************************************************************

Timing MoveToFront
*-----------------------------------------------------------
Running 38 total tests.

Test 1: count calls to methods in BinaryStdOut from encode()
  * abra.txt
  * amendments.txt
==> passed

Test 2: count calls to methods in BinaryStdOut from decode()
  * abra.txt.mtf
  * amendments.txt.mtf
==> passed

Tests  3-12: Timing encode() with first n character of dickens.txt
             [ max allowed time = 2 seconds and <= 4x reference ]

                 n    student  reference      ratio
---------------------------------------------------
=> passed     1000       0.00       0.00       0.76
=> passed     2000       0.00       0.00       1.18
=> passed     4000       0.01       0.01       1.22
=> passed     8000       0.01       0.01       1.24
=> passed    16000       0.02       0.02       1.24
=> passed    32000       0.05       0.04       1.27
=> passed    64000       0.10       0.08       1.27
=> passed   128000       0.19       0.15       1.28
=> passed   256000       0.38       0.30       1.29

Estimated running time (using last 6 measurements)
     = 1.68e-06 * n^0.99  (R^2 = 1.00)


Tests  13-20: Timing encode() with first n character of abab.txt
             [ max allowed time = 2 seconds and <= 4x reference ]

                 n    student  reference      ratio
---------------------------------------------------
=> passed     1000       0.00       0.00       1.35
=> passed     2000       0.00       0.00       1.34
=> passed     4000       0.01       0.00       1.35
=> passed     8000       0.01       0.01       1.35
=> passed    16000       0.02       0.02       1.35
=> passed    32000       0.05       0.03       1.34
=> passed    64000       0.09       0.07       1.34
=> passed   128000       0.17       0.13       1.38
=> passed   256000       0.35       0.25       1.38

Estimated running time (using last 6 measurements)
     = 1.76e-06 * n^0.98  (R^2 = 1.00)


Tests 21-29: Timing decode() with first n character of dickens.txt
             [ max allowed time = 2 seconds and <= 4x reference ]

                 n    student  reference      ratio
---------------------------------------------------
=> passed     1000       0.00       0.00       1.20
=> passed     2000       0.00       0.00       1.32
=> passed     4000       0.01       0.00       1.25
=> passed     8000       0.01       0.01       1.27
=> passed    16000       0.02       0.02       1.30
=> passed    32000       0.04       0.03       1.31
=> passed    64000       0.09       0.07       1.31
=> passed   128000       0.18       0.13       1.32
=> passed   256000       0.35       0.26       1.33

Estimated running time (using last 6 measurements)
     = 1.39e-06 * n^1.00  (R^2 = 1.00)


Tests 30-38: Timing decode() with first n character of abab.txt
             [ max allowed time = 2 seconds and <= 4x reference ]

                 n    student  reference      ratio
---------------------------------------------------
=> passed     1000       0.00       0.00       1.36
=> passed     2000       0.00       0.00       1.37
=> passed     4000       0.01       0.00       1.37
=> passed     8000       0.01       0.01       1.37
=> passed    16000       0.02       0.02       1.35
=> passed    32000       0.04       0.03       1.38
=> passed    64000       0.09       0.06       1.37
=> passed   128000       0.17       0.13       1.34
=> passed   256000       0.35       0.25       1.39

Estimated running time (using last 6 measurements)
     = 1.32e-06 * n^1.00  (R^2 = 1.00)


Total: 38/38 tests passed!


================================================================



********************************************************************************
*  TIMING (substituting reference CircularSuffixArray)
********************************************************************************

Timing BurrowsWheeler
*-----------------------------------------------------------
Running 95 total tests.

Test 1: count calls to methods in CircularSuffixArray from transform()
  * abra.txt
  * amendments.txt
==> passed

Test 2: count calls to methods in CircularSuffixArray from inverseTransform()
  * abra.txt.bwt
  * amendments.txt.bwt
==> passed

Test 3: count calls to methods in BinaryStdOut from transform()
  * abra.txt
  * amendments.txt
==> passed

Test 4: count calls to methods in BinaryStdOut from inverseTransform()
  * abra.txt.bwt
  * amendments.txt.bwt
==> passed

Tests  5-17: timing transform() with first n character of dickens.txt
             [ max allowed time = 2 seconds and <= 8x reference ]

                 n    student  reference      ratio
---------------------------------------------------
=> passed     1000       0.00       0.00       0.09
=> passed     2000       0.00       0.00       0.65
=> passed     4000       0.00       0.00       0.57
=> passed     8000       0.00       0.00       0.67
=> passed    16000       0.00       0.01       0.54
=> passed    32000       0.01       0.01       0.63
=> passed    64000       0.01       0.01       0.72
=> passed   128000       0.02       0.02       0.76
=> passed   256000       0.04       0.04       0.99
=> passed   512000       0.08       0.08       1.00
=> passed  1024000       0.16       0.16       1.00
=> passed  2048000       0.39       0.39       1.01
=> passed  4096000       0.89       0.88       1.01

Estimated running time as a function of n (using last 6 measurements)
    = 2.87e-08 * n^1.13  (R^2 = 1.00)


Tests 18-30: timing transform() with first n character of random.bin
             [ max allowed time = 2 seconds and <= 8x reference ]

                 n    student  reference      ratio
---------------------------------------------------
=> passed     1000       0.00       0.00       0.80
=> passed     2000       0.00       0.00       0.89
=> passed     4000       0.00       0.00       0.83
=> passed     8000       0.00       0.00       0.88
=> passed    16000       0.00       0.00       1.57
=> passed    32000       0.01       0.01       0.89
=> passed    64000       0.01       0.01       0.95
=> passed   128000       0.02       0.02       1.09
=> passed   256000       0.04       0.05       0.87
=> passed   512000       0.09       0.09       0.97
=> passed  1024000       0.19       0.18       1.01
=> passed  2048000       0.43       0.44       0.97
=> passed  4096000       1.03       1.01       1.02

Estimated running time as a function of n (using last 6 measurements)
    = 4.70e-08 * n^1.10  (R^2 = 1.00)


Tests 31-43: timing transform() with first n character of abab.txt
             [ max allowed time = 2 seconds and <= 8x reference ]

                 n    student  reference      ratio
---------------------------------------------------
=> passed     1000       0.00       0.00       0.71
=> passed     2000       0.00       0.00       0.99
=> passed     4000       0.00       0.00       0.99
=> passed     8000       0.00       0.00       1.04
=> passed    16000       0.00       0.00       1.00
=> passed    32000       0.00       0.00       0.93
=> passed    64000       0.00       0.00       0.99
=> passed   128000       0.00       0.00       0.96
=> passed   256000       0.01       0.01       1.03
=> passed   512000       0.02       0.01       1.40
=> passed  1024000       0.03       0.03       0.81
=> passed  2048000       0.05       0.05       1.00
=> passed  4096000       0.10       0.10       0.98

Estimated running time as a function of n (using last 6 measurements)
    = 3.88e-08 * n^0.97  (R^2 = 0.99)


Tests 44-56: timing inverseTransform() with first n character of dickens.txt
             [ max allowed time = 2 seconds and <= 8x reference ]

                 n    student  reference      ratio
---------------------------------------------------
=> passed     1000       0.00       0.00       3.06
=> passed     2000       0.00       0.00       2.22
=> passed     4000       0.00       0.00       1.66
=> passed     8000       0.00       0.00       0.96
=> passed    16000       0.00       0.00       0.69
=> passed    32000       0.00       0.00       2.22
=> passed    64000       0.01       0.00       2.34
=> passed   128000       0.01       0.01       1.21
=> passed   256000       0.01       0.01       2.07
=> passed   512000       0.04       0.02       2.09
=> passed  1024000       0.10       0.04       2.28
=> passed  2048000       0.38       0.14       2.65
=> passed  4096000       0.70       0.41       1.71

Estimated running time as a function of n (using last 6 measurements)
    = 4.39e-10 * n^1.40  (R^2 = 0.99)


Tests 57-69: timing inverseTransform() with first n character of random.bin
             [ max allowed time = 2 seconds and <= 8x reference ]

                 n    student  reference      ratio
---------------------------------------------------
=> passed     1024       0.00       0.00      40.58
=> passed     2048       0.00       0.00      21.69
=> passed     4096       0.00       0.00       8.47
=> passed     8192       0.00       0.00       7.13
=> passed    16384       0.00       0.00       6.59
=> passed    32768       0.00       0.00       4.75
=> passed    65536       0.01       0.00       4.10
=> passed   131072       0.01       0.00       2.66
=> passed   262144       0.03       0.01       2.37
=> passed   524288       0.04       0.02       2.20
=> passed  1048576       0.10       0.05       2.13
=> passed  2097152       0.24       0.13       1.81
=> passed  4194304       0.56       0.50       1.11

==> FAILED.   inverseTransform() is possibly n*R or n log n. The ratio is consistently too high.
Estimated running time as a function of n (using last 6 measurements)
    = 1.79e-08 * n^1.13  (R^2 = 1.00)


Tests 70-82: timing inverseTransform() with first n character of abab.txt
             [ max allowed time = 2 seconds and <= 8x reference ]

                 n    student  reference      ratio
---------------------------------------------------
=> passed     1000       0.00       0.00       2.96
=> passed     2000       0.00       0.00       2.36
=> passed     4000       0.00       0.00       3.28
=> passed     8000       0.00       0.00       3.37
=> passed    16000       0.00       0.00       2.58
=> passed    32000       0.00       0.00       2.47
=> passed    64000       0.00       0.00       2.35
=> passed   128000       0.01       0.00       2.36
=> passed   256000       0.01       0.01       2.38
=> passed   512000       0.02       0.01       2.39
=> passed  1024000       0.05       0.02       2.34
=> passed  2048000       0.10       0.04       2.38
=> passed  4096000       0.19       0.08       2.33

==> FAILED.   inverseTransform() is possibly n*R or n log n. The ratio is consistently too high.
Estimated running time as a function of n (using last 6 measurements)
    = 5.09e-08 * n^0.99  (R^2 = 1.00)


Tests 83-95: timing inverseTransform() with first n character of cyclic.bin
             [ max allowed time = 2 seconds and <= 8x reference ]

                 n    student  reference      ratio
---------------------------------------------------
=> passed     1024       0.00       0.00       4.78
=> passed     2048       0.00       0.00       4.17
=> passed     4096       0.00       0.00       3.71
=> passed     8192       0.00       0.00       3.17
=> passed    16384       0.00       0.00       2.84
=> passed    32768       0.00       0.00       2.33
=> passed    65536       0.00       0.00       2.30
=> passed   131072       0.01       0.00       2.01
=> passed   262144       0.02       0.01       1.95
=> passed   524288       0.04       0.02       1.70
=> passed  1048576       0.11       0.05       2.26
=> passed  2097152       0.38       0.15       2.60
=> passed  4194304       0.82       0.30       2.70

==> FAILED.   inverseTransform() is possibly n*R or n log n. The ratio is consistently too high.
Estimated running time as a function of n (using last 6 measurements)
    = 5.62e-10 * n^1.39  (R^2 = 1.00)


Total: 92/95 tests passed!


================================================================